// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: group.proto

package dynamic_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DynamicService_CreateGroup_FullMethodName  = "/dynamic_service.DynamicService/CreateGroup"
	DynamicService_UpdateGroup_FullMethodName  = "/dynamic_service.DynamicService/UpdateGroup"
	DynamicService_DeleteGroup_FullMethodName  = "/dynamic_service.DynamicService/DeleteGroup"
	DynamicService_GetGroupById_FullMethodName = "/dynamic_service.DynamicService/GetGroupById"
	DynamicService_GetAllGroup_FullMethodName  = "/dynamic_service.DynamicService/GetAllGroup"
	DynamicService_CreateField_FullMethodName  = "/dynamic_service.DynamicService/CreateField"
	DynamicService_UpdateField_FullMethodName  = "/dynamic_service.DynamicService/UpdateField"
	DynamicService_DeleteField_FullMethodName  = "/dynamic_service.DynamicService/DeleteField"
	DynamicService_GetFieldById_FullMethodName = "/dynamic_service.DynamicService/GetFieldById"
	DynamicService_GetAllField_FullMethodName  = "/dynamic_service.DynamicService/GetAllField"
	DynamicService_GetFullGroup_FullMethodName = "/dynamic_service.DynamicService/GetFullGroup"
)

// DynamicServiceClient is the client API for DynamicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DynamicServiceClient interface {
	CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	DeleteGroup(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetGroupById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*Group, error)
	GetAllGroup(ctx context.Context, in *GetAllGroupRequest, opts ...grpc.CallOption) (*GetAllGroupResponse, error)
	CreateField(ctx context.Context, in *Field, opts ...grpc.CallOption) (*Field, error)
	UpdateField(ctx context.Context, in *Field, opts ...grpc.CallOption) (*Field, error)
	DeleteField(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFieldById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*Field, error)
	GetAllField(ctx context.Context, in *GetAllFieldRequest, opts ...grpc.CallOption) (*GetAllFieldResponse, error)
	GetFullGroup(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*Group, error)
}

type dynamicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDynamicServiceClient(cc grpc.ClientConnInterface) DynamicServiceClient {
	return &dynamicServiceClient{cc}
}

func (c *dynamicServiceClient) CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, DynamicService_CreateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicServiceClient) UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, DynamicService_UpdateGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicServiceClient) DeleteGroup(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DynamicService_DeleteGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicServiceClient) GetGroupById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, DynamicService_GetGroupById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicServiceClient) GetAllGroup(ctx context.Context, in *GetAllGroupRequest, opts ...grpc.CallOption) (*GetAllGroupResponse, error) {
	out := new(GetAllGroupResponse)
	err := c.cc.Invoke(ctx, DynamicService_GetAllGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicServiceClient) CreateField(ctx context.Context, in *Field, opts ...grpc.CallOption) (*Field, error) {
	out := new(Field)
	err := c.cc.Invoke(ctx, DynamicService_CreateField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicServiceClient) UpdateField(ctx context.Context, in *Field, opts ...grpc.CallOption) (*Field, error) {
	out := new(Field)
	err := c.cc.Invoke(ctx, DynamicService_UpdateField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicServiceClient) DeleteField(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DynamicService_DeleteField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicServiceClient) GetFieldById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*Field, error) {
	out := new(Field)
	err := c.cc.Invoke(ctx, DynamicService_GetFieldById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicServiceClient) GetAllField(ctx context.Context, in *GetAllFieldRequest, opts ...grpc.CallOption) (*GetAllFieldResponse, error) {
	out := new(GetAllFieldResponse)
	err := c.cc.Invoke(ctx, DynamicService_GetAllField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicServiceClient) GetFullGroup(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, DynamicService_GetFullGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamicServiceServer is the server API for DynamicService service.
// All implementations must embed UnimplementedDynamicServiceServer
// for forward compatibility
type DynamicServiceServer interface {
	CreateGroup(context.Context, *Group) (*Group, error)
	UpdateGroup(context.Context, *Group) (*Group, error)
	DeleteGroup(context.Context, *GetByIdRequest) (*emptypb.Empty, error)
	GetGroupById(context.Context, *GetByIdRequest) (*Group, error)
	GetAllGroup(context.Context, *GetAllGroupRequest) (*GetAllGroupResponse, error)
	CreateField(context.Context, *Field) (*Field, error)
	UpdateField(context.Context, *Field) (*Field, error)
	DeleteField(context.Context, *GetByIdRequest) (*emptypb.Empty, error)
	GetFieldById(context.Context, *GetByIdRequest) (*Field, error)
	GetAllField(context.Context, *GetAllFieldRequest) (*GetAllFieldResponse, error)
	GetFullGroup(context.Context, *GetByIdRequest) (*Group, error)
	mustEmbedUnimplementedDynamicServiceServer()
}

// UnimplementedDynamicServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDynamicServiceServer struct {
}

func (UnimplementedDynamicServiceServer) CreateGroup(context.Context, *Group) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedDynamicServiceServer) UpdateGroup(context.Context, *Group) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedDynamicServiceServer) DeleteGroup(context.Context, *GetByIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedDynamicServiceServer) GetGroupById(context.Context, *GetByIdRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupById not implemented")
}
func (UnimplementedDynamicServiceServer) GetAllGroup(context.Context, *GetAllGroupRequest) (*GetAllGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGroup not implemented")
}
func (UnimplementedDynamicServiceServer) CreateField(context.Context, *Field) (*Field, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateField not implemented")
}
func (UnimplementedDynamicServiceServer) UpdateField(context.Context, *Field) (*Field, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateField not implemented")
}
func (UnimplementedDynamicServiceServer) DeleteField(context.Context, *GetByIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteField not implemented")
}
func (UnimplementedDynamicServiceServer) GetFieldById(context.Context, *GetByIdRequest) (*Field, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFieldById not implemented")
}
func (UnimplementedDynamicServiceServer) GetAllField(context.Context, *GetAllFieldRequest) (*GetAllFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllField not implemented")
}
func (UnimplementedDynamicServiceServer) GetFullGroup(context.Context, *GetByIdRequest) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullGroup not implemented")
}
func (UnimplementedDynamicServiceServer) mustEmbedUnimplementedDynamicServiceServer() {}

// UnsafeDynamicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DynamicServiceServer will
// result in compilation errors.
type UnsafeDynamicServiceServer interface {
	mustEmbedUnimplementedDynamicServiceServer()
}

func RegisterDynamicServiceServer(s grpc.ServiceRegistrar, srv DynamicServiceServer) {
	s.RegisterService(&DynamicService_ServiceDesc, srv)
}

func _DynamicService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_CreateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).CreateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_UpdateGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).UpdateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_DeleteGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).DeleteGroup(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicService_GetGroupById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).GetGroupById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_GetGroupById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).GetGroupById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicService_GetAllGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).GetAllGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_GetAllGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).GetAllGroup(ctx, req.(*GetAllGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicService_CreateField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Field)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).CreateField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_CreateField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).CreateField(ctx, req.(*Field))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicService_UpdateField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Field)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).UpdateField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_UpdateField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).UpdateField(ctx, req.(*Field))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicService_DeleteField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).DeleteField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_DeleteField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).DeleteField(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicService_GetFieldById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).GetFieldById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_GetFieldById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).GetFieldById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicService_GetAllField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).GetAllField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_GetAllField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).GetAllField(ctx, req.(*GetAllFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicService_GetFullGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServiceServer).GetFullGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DynamicService_GetFullGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServiceServer).GetFullGroup(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DynamicService_ServiceDesc is the grpc.ServiceDesc for DynamicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DynamicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dynamic_service.DynamicService",
	HandlerType: (*DynamicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _DynamicService_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _DynamicService_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _DynamicService_DeleteGroup_Handler,
		},
		{
			MethodName: "GetGroupById",
			Handler:    _DynamicService_GetGroupById_Handler,
		},
		{
			MethodName: "GetAllGroup",
			Handler:    _DynamicService_GetAllGroup_Handler,
		},
		{
			MethodName: "CreateField",
			Handler:    _DynamicService_CreateField_Handler,
		},
		{
			MethodName: "UpdateField",
			Handler:    _DynamicService_UpdateField_Handler,
		},
		{
			MethodName: "DeleteField",
			Handler:    _DynamicService_DeleteField_Handler,
		},
		{
			MethodName: "GetFieldById",
			Handler:    _DynamicService_GetFieldById_Handler,
		},
		{
			MethodName: "GetAllField",
			Handler:    _DynamicService_GetAllField_Handler,
		},
		{
			MethodName: "GetFullGroup",
			Handler:    _DynamicService_GetFullGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group.proto",
}
